{"ast":null,"code":"var _jsxFileName = \"/Users/user1/freelanceing/reactAssignment/src/components/MovieInfo.jsx\";\nimport React from \"react\";\nimport { Button, Card, CardMedia, CardContent, Typography } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport _ from \"lodash\";\nconst fields = [\"Runtime\", \"Website\", \"Writer\", \"imdbID\", \"imdbRating\", \"imdbVotes\", \"Released\", \"Actors \", \"Awards\", \"BoxOffice\", \"Country\", \"DVD\", \"Director\", \"Genre\", \"Language\", \"Metascore\", \"Plot\", \"Production\", \"Rated\"];\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: \"flex\",\n    padding: 8\n  },\n  details: {\n    display: \"flex\",\n    flexDirection: \"column\"\n  },\n  content: {\n    flex: \"1 0 auto\"\n  },\n  cover: {\n    width: 150,\n    height: 223\n  }\n}));\n\nconst MovieInfo = ({\n  movie,\n  plot,\n  showMoreInfo,\n  showPoster\n}) => {\n  const {\n    imdbID,\n    Poster,\n    Title,\n    Year,\n    imdbRating\n  } = movie;\n  const classes = useStyles();\n  const rating = imdbRating && imdbRating !== \"N/A\" ? _.toNumber(imdbRating) : 0;\n  const boxoffice = rating >= 7 ? \"hit\" : \"flop\";\n  return /*#__PURE__*/React.createElement(Card, {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }\n  }, showPoster && /*#__PURE__*/React.createElement(CardMedia, {\n    className: classes.cover,\n    image: Poster,\n    title: Title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.details,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(CardContent, {\n    className: classes.content,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    component: \"h5\",\n    variant: \"h5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 11\n    }\n  }, Title, \" (\", Year, \")\"), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"subtitle1\",\n    color: \"textSecondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 11\n    }\n  }, \"imdbID: \", imdbID), !showPoster && plot === \"short\" && /*#__PURE__*/React.createElement(Typography, {\n    variant: \"subtitle1\",\n    color: \"textSecondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: () => showMoreInfo(imdbID),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 15\n    }\n  }, \"More Info\")), plot === \"long\" && /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"subtitle1\",\n    color: \"textSecondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 15\n    }\n  }, \"Box Office: \", boxoffice), _.map(fields, field => {\n    return /*#__PURE__*/React.createElement(Typography, {\n      variant: \"body2\",\n      color: \"textSecondary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 19\n      }\n    }, `${field} : ${_.get(movie, field, \"\")}`);\n  })))));\n};\n\nexport default MovieInfo;","map":{"version":3,"sources":["/Users/user1/freelanceing/reactAssignment/src/components/MovieInfo.jsx"],"names":["React","Button","Card","CardMedia","CardContent","Typography","makeStyles","_","fields","useStyles","theme","root","display","padding","details","flexDirection","content","flex","cover","width","height","MovieInfo","movie","plot","showMoreInfo","showPoster","imdbID","Poster","Title","Year","imdbRating","classes","rating","toNumber","boxoffice","map","field","get"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {\n  Button,\n  Card,\n  CardMedia,\n  CardContent,\n  Typography,\n} from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport _ from \"lodash\";\n\nconst fields = [\n  \"Runtime\",\n  \"Website\",\n  \"Writer\",\n  \"imdbID\",\n  \"imdbRating\",\n  \"imdbVotes\",\n  \"Released\",\n  \"Actors \",\n  \"Awards\",\n  \"BoxOffice\",\n  \"Country\",\n  \"DVD\",\n  \"Director\",\n  \"Genre\",\n  \"Language\",\n  \"Metascore\",\n  \"Plot\",\n  \"Production\",\n  \"Rated\",\n];\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n    padding: 8,\n  },\n  details: {\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n  content: {\n    flex: \"1 0 auto\",\n  },\n  cover: {\n    width: 150,\n    height: 223,\n  },\n}));\n\nconst MovieInfo = ({ movie, plot, showMoreInfo, showPoster }) => {\n  const { imdbID, Poster, Title, Year, imdbRating } = movie;\n  const classes = useStyles();\n  const rating =\n    imdbRating && imdbRating !== \"N/A\" ? _.toNumber(imdbRating) : 0;\n  const boxoffice = rating >= 7 ? \"hit\" : \"flop\";\n\n  return (\n    <Card className={classes.root}>\n      {showPoster && (\n        <CardMedia className={classes.cover} image={Poster} title={Title} />\n      )}\n      <div className={classes.details}>\n        <CardContent className={classes.content}>\n          <Typography component=\"h5\" variant=\"h5\">\n            {Title} ({Year})\n          </Typography>\n          <Typography variant=\"subtitle1\" color=\"textSecondary\">\n            imdbID: {imdbID}\n          </Typography>\n          {!showPoster && plot === \"short\" && (\n            <Typography variant=\"subtitle1\" color=\"textSecondary\">\n              <Button onClick={() => showMoreInfo(imdbID)}>More Info</Button>\n            </Typography>\n          )}\n          {plot === \"long\" && (\n            <React.Fragment>\n              <Typography variant=\"subtitle1\" color=\"textSecondary\">\n                Box Office: {boxoffice}\n              </Typography>\n              {_.map(fields, (field) => {\n                return (\n                  <Typography variant=\"body2\" color=\"textSecondary\">\n                    {`${field} : ${_.get(movie, field, \"\")}`}\n                  </Typography>\n                );\n              })}\n            </React.Fragment>\n          )}\n        </CardContent>\n      </div>\n    </Card>\n  );\n};\n\nexport default MovieInfo;\n"]},"metadata":{},"sourceType":"module"}